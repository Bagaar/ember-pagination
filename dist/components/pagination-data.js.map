{"version":3,"file":"pagination-data.js","sources":["../../src/components/pagination-data.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport { assert } from '@ember/debug';\nimport { hash } from '@ember/helper';\nimport Component from '@glimmer/component';\ninterface PaginationDataSignature {\n    Args: {\n        currentPage: number;\n        itemsPerPage: number;\n        pageMargins?: number;\n        pageRange?: number;\n        totalItems: number;\n    };\n    Blocks: {\n        default: [{\n                activeItems: number;\n                allPages: number[];\n                currentPage: number;\n                endMarginPages: number[] | null;\n                firstActiveItem: number;\n                isFirstPage: boolean;\n                isLastPage: boolean;\n                itemsPerPage: number;\n                lastActiveItem: number;\n                lastPage: number;\n                nextPage: number | null;\n                pageMargins: number;\n                pageRange: number | null;\n                pageRangePages: number[] | null;\n                previousPage: number | null;\n                shouldShowLowerBreak: boolean;\n                shouldShowUpperBreak: boolean;\n                startMarginPages: number[] | null;\n                totalItems: number;\n                totalPages: number;\n            }];\n    };\n}\nconst DISABLED = null;\nconst FIRST_PAGE = 1;\nexport default class PaginationData extends Component<PaginationDataSignature> {\n    /**\n   * Argument getters\n   */ get currentPage() {\n        assert(`@currentPage is required and must be a number. You provided \\`${this.args.currentPage}\\`.`, typeof this.args.currentPage === 'number');\n        assert(`@currentPage must be a value between \\`${FIRST_PAGE}\\` and \\`${this.lastPage}\\`. You provided \\`${this.args.currentPage}\\`.`, this.args.currentPage >= FIRST_PAGE && this.args.currentPage <= this.lastPage);\n        return this.args.currentPage;\n    }\n    get itemsPerPage() {\n        assert(`@itemsPerPage is required and must be a number. You provided \\`${this.args.itemsPerPage}\\`.`, typeof this.args.itemsPerPage === 'number');\n        return this.args.itemsPerPage;\n    }\n    get pageMargins() {\n        if (typeof this.args.pageMargins !== 'number') {\n            return 1;\n        }\n        assert(`@pageMargins must be a number higher than \\`0\\`. You provided \\`${this.args.pageMargins}\\`.`, this.args.pageMargins > 0);\n        return this.args.pageMargins;\n    }\n    get pageRange() {\n        if (typeof this.args.pageRange !== 'number') {\n            return null;\n        }\n        assert(`@pageRange must be an uneven number to make sure that the active page is always center aligned. You provided \\`${this.args.pageRange}\\`.`, this.args.pageRange % 2 !== 0);\n        return this.args.pageRange;\n    }\n    get totalItems() {\n        assert(`@totalItems is required and must be a number. You provided \\`${this.args.totalItems}\\`.`, typeof this.args.totalItems === 'number');\n        return this.args.totalItems;\n    }\n    /**\n   * State getters\n   */ get _currentPage() {\n        return clamp(this.currentPage, FIRST_PAGE, this.lastPage);\n    }\n    get activeItems() {\n        if (this.itemsPerPage * this._currentPage > this.totalItems) {\n            return this.totalItems % this.itemsPerPage;\n        }\n        return this.itemsPerPage;\n    }\n    get allPages() {\n        return range(FIRST_PAGE, this.lastPage);\n    }\n    get endMarginPages() {\n        if (this.pageRange === null) {\n            return null;\n        }\n        if (this.totalPages < this.pageMarginsThreshold) {\n            return [];\n        }\n        return range(this.pageRangeUpperLimit + 1, this.totalPages);\n    }\n    get firstActiveItem() {\n        if (this.totalItems > 0) {\n            return this._currentPage * this.itemsPerPage - this.itemsPerPage + 1;\n        }\n        return 0;\n    }\n    get isFirstPage() {\n        return this._currentPage === FIRST_PAGE;\n    }\n    get isLastPage() {\n        return this._currentPage === this.lastPage;\n    }\n    get lastActiveItem() {\n        if (this.totalItems > 0) {\n            return this.firstActiveItem + this.activeItems - 1;\n        }\n        return 0;\n    }\n    get lastPage() {\n        return this.totalPages;\n    }\n    get nextPage() {\n        return this.isLastPage ? DISABLED : this._currentPage + 1;\n    }\n    get pageMarginsThreshold() {\n        return (this.pageRange || 0) + this.pageMargins * 2;\n    }\n    get pageRangeLowerLimit() {\n        return this.pageMargins + 1;\n    }\n    get pageRangePages() {\n        if (this.pageRange === null) {\n            return null;\n        }\n        if (this.totalPages < this.pageMarginsThreshold) {\n            return this.allPages;\n        }\n        const pageRangeOffset1 = Math.floor(this.pageRange / 2);\n        let pageRangeStart1 = this._currentPage - pageRangeOffset1;\n        let pageRangeEnd1 = this._currentPage + pageRangeOffset1;\n        if (pageRangeStart1 < this.pageRangeLowerLimit) {\n            pageRangeStart1 = this.pageRangeLowerLimit;\n            pageRangeEnd1 = pageRangeStart1 + this.pageRange - 1;\n        }\n        if (pageRangeEnd1 > this.pageRangeUpperLimit) {\n            pageRangeStart1 = this.pageRangeUpperLimit - this.pageRange + 1;\n            pageRangeEnd1 = this.pageRangeUpperLimit;\n        }\n        return range(pageRangeStart1, pageRangeEnd1);\n    }\n    get pageRangeUpperLimit() {\n        return this.totalPages - this.pageMargins;\n    }\n    get previousPage() {\n        return this.isFirstPage ? DISABLED : this._currentPage - 1;\n    }\n    get shouldShowLowerBreak() {\n        if (this.pageRange === null) {\n            return false;\n        }\n        if (this.totalPages < this.pageMarginsThreshold) {\n            return false;\n        }\n        return (Array.isArray(this.pageRangePages) && this.pageRangePages.length > 0 && this.pageRangePages[0] !== this.pageRangeLowerLimit);\n    }\n    get shouldShowUpperBreak() {\n        if (this.pageRange === null) {\n            return false;\n        }\n        if (this.totalPages < this.pageMarginsThreshold) {\n            return false;\n        }\n        return (Array.isArray(this.pageRangePages) && this.pageRangePages.length > 0 && this.pageRangePages[this.pageRangePages.length - 1] !== this.pageRangeUpperLimit);\n    }\n    get startMarginPages() {\n        if (this.pageRange === null) {\n            return null;\n        }\n        if (this.totalPages < this.pageMarginsThreshold) {\n            return [];\n        }\n        return range(FIRST_PAGE, this.pageMargins);\n    }\n    get totalPages() {\n        const totalPages1 = Math.ceil(this.totalItems / this.itemsPerPage);\n        return isNaN(totalPages1) || totalPages1 === 0 ? 1 : totalPages1;\n    }\n    static{\n        template(`\n    {{yield\n      (hash\n        activeItems=this.activeItems\n        allPages=this.allPages\n        currentPage=this._currentPage\n        endMarginPages=this.endMarginPages\n        firstActiveItem=this.firstActiveItem\n        isFirstPage=this.isFirstPage\n        isLastPage=this.isLastPage\n        itemsPerPage=this.itemsPerPage\n        lastActiveItem=this.lastActiveItem\n        lastPage=this.lastPage\n        nextPage=this.nextPage\n        pageMargins=this.pageMargins\n        pageRange=this.pageRange\n        pageRangePages=this.pageRangePages\n        previousPage=this.previousPage\n        shouldShowLowerBreak=this.shouldShowLowerBreak\n        shouldShowUpperBreak=this.shouldShowUpperBreak\n        startMarginPages=this.startMarginPages\n        totalItems=this.totalItems\n        totalPages=this.totalPages\n      )\n    }}\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\nfunction clamp(number1: number, min1: number, max1: number) {\n    return Math.min(Math.max(number1, min1), max1);\n}\nfunction range(start1: number, end1: number) {\n    return new Array(end1 - start1 + 1).fill(undefined).map((_1, i1)=>i1 + start1);\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["DISABLED","FIRST_PAGE","PaginationData","Component","currentPage","assert","args","lastPage","itemsPerPage","pageMargins","pageRange","totalItems","_currentPage","clamp","activeItems","allPages","range","endMarginPages","totalPages","pageMarginsThreshold","pageRangeUpperLimit","firstActiveItem","isFirstPage","isLastPage","lastActiveItem","nextPage","pageRangeLowerLimit","pageRangePages","pageRangeOffset1","Math","floor","pageRangeStart1","pageRangeEnd1","previousPage","shouldShowLowerBreak","Array","isArray","length","shouldShowUpperBreak","startMarginPages","totalPages1","ceil","isNaN","setComponentTemplate","precompileTemplate","scope","hash","strictMode","number1","min1","max1","min","max","start1","end1","fill","undefined","map","_1","i1"],"mappings":"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"}